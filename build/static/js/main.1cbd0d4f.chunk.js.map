{"version":3,"sources":["components/recorder-controls/index.jsx","utils/format-time.js","utils/generate-key.js","components/recordings-list/index.jsx","hooks/use-recordings-list.js","handlers/recordings-list.js","handlers/recorder-controls.js","hooks/useRecorder.js","App.jsx","index.js"],"names":["RecorderControls","seconds","minutes","recorderState","handlers","recordingMinutes","recordingSeconds","initRecording","startRecording","saveRecording","cancelRecording","className","title","onClick","icon","faTimes","disabled","faSave","size","faMicrophone","generateKey","uuid","RecordingsList","audio","useState","recordings","setRecordings","useEffect","prevState","key","deleteAudio","audioKey","filter","record","useRecordingsList","length","map","controls","src","faTrashAlt","faExclamationCircle","color","setRecorderState","a","navigator","mediaDevices","getUserMedia","stream","mediaStream","console","log","initialState","mediaRecorder","useRecorder","recordingInterval","setInterval","clearInterval","MediaRecorder","recorder","chunks","state","start","ondataavailable","e","push","data","onstop","blob","Blob","type","window","URL","createObjectURL","getAudioTracks","forEach","track","stop","App","method","encType","name","id","defaultValue","prop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cbd0d4f.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMicrophone, faTimes, faSave } from \"@fortawesome/free-solid-svg-icons\";\nimport { formatMinutes, formatSeconds } from \"../../utils/format-time\";\nimport \"./styles.css\";\n\nexport default function RecorderControls({ recorderState, handlers }) {\n  const { recordingMinutes, recordingSeconds, initRecording } = recorderState;\n  const { startRecording, saveRecording, cancelRecording } = handlers;\n\n  return (\n    <div className=\"controls-container\">\n      <div className=\"recorder-display\">\n        <div className=\"recording-time\">\n          {initRecording && <div className=\"recording-indicator\"></div>}\n          <span>{formatMinutes(recordingMinutes)}</span>\n          <span>:</span>\n          <span>{formatSeconds(recordingSeconds)}</span>\n        </div>\n        {initRecording && (\n          <div className=\"cancel-button-container\">\n            <button className=\"cancel-button\" title=\"Cancel recording\" onClick={cancelRecording}>\n              <FontAwesomeIcon icon={faTimes} />\n            </button>\n          </div>\n        )}\n      </div>\n      <div className=\"start-button-container\">\n        {initRecording ? (\n          <button\n            className=\"start-button\"\n            title=\"Save recording\"\n            disabled={recordingSeconds === 0}\n            onClick={saveRecording}\n          >\n            <FontAwesomeIcon icon={faSave} size=\"2x\" />\n          </button>\n        ) : (\n          <button className=\"start-button\" title=\"Start recording\" onClick={startRecording}>\n            <FontAwesomeIcon icon={faMicrophone} size=\"2x\" />\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","export function formatMinutes(minutes) {\n  return minutes < 10 ? `0${minutes}` : minutes;\n}\n\nexport function formatSeconds(seconds) {\n  return seconds < 10 ? `0${seconds}` : seconds;\n}\n","import { v4 as uuid } from \"uuid\";\n\nfunction generateKey() {\n  return uuid();\n}\n\nexport default generateKey;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport useRecordingsList from \"../../hooks/use-recordings-list\";\nimport \"./styles.css\";\n\nexport default function RecordingsList({ audio }) {\n  const { recordings, deleteAudio } = useRecordingsList(audio);\n\n  return (\n    <div className=\"recordings-container\">\n      {recordings.length > 0 ? (\n        <>\n          <h1>Your recordings</h1>\n          <div className=\"recordings-list\">\n            {recordings.map((record) => (\n              <div className=\"record\" key={record.key}>\n                <audio controls src={record.audio} />\n                <div className=\"delete-button-container\">\n                  <button\n                    className=\"delete-button\"\n                    title=\"Delete this audio\"\n                    onClick={() => deleteAudio(record.key)}\n                  >\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </>\n      ) : (\n        <div className=\"no-records\">\n          <FontAwesomeIcon icon={faExclamationCircle} size=\"2x\" color=\"#f2ea02\" />\n          <span>You don't have records</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { deleteAudio } from \"../handlers/recordings-list\";\nimport generateKey from \"../utils/generate-key\";\n\nexport default function useRecordingsList(audio) {\n  const [recordings, setRecordings] = useState([]);\n\n  useEffect(() => {\n    if (audio)\n      setRecordings((prevState) => {\n        return [...prevState, { key: generateKey(), audio }];\n      });\n  }, [audio]);\n\n  return {\n    recordings,\n    deleteAudio: (audioKey) => deleteAudio(audioKey, setRecordings),\n  };\n}\n","export function deleteAudio(audioKey, setRecordings) {\n  setRecordings((prevState) => prevState.filter((record) => record.key !== audioKey));\n}\n","export async function startRecording(setRecorderState) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n\n    setRecorderState((prevState) => {\n      return {\n        ...prevState,\n        initRecording: true,\n        mediaStream: stream,\n      };\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport function saveRecording(recorder) {\n  if (recorder.state !== \"inactive\") recorder.stop();\n}\n","import { useState, useEffect } from \"react\";\nimport { startRecording, saveRecording } from \"../handlers/recorder-controls\";\n\nconst initialState = {\n  recordingMinutes: 0,\n  recordingSeconds: 0,\n  initRecording: false,\n  mediaStream: null,\n  mediaRecorder: null,\n  audio: null,\n};\n\nexport default function useRecorder() {\n  const [recorderState, setRecorderState] = useState(initialState);\n\n  useEffect(() => {\n    const MAX_RECORDER_TIME = 5;\n    let recordingInterval = null;\n\n    if (recorderState.initRecording)\n      recordingInterval = setInterval(() => {\n        setRecorderState((prevState) => {\n          if (\n            prevState.recordingMinutes === MAX_RECORDER_TIME &&\n            prevState.recordingSeconds === 0\n          ) {\n            clearInterval(recordingInterval);\n            return prevState;\n          }\n\n          if (prevState.recordingSeconds >= 0 && prevState.recordingSeconds < 59)\n            return {\n              ...prevState,\n              recordingSeconds: prevState.recordingSeconds + 1,\n            };\n\n          if (prevState.recordingSeconds === 59)\n            return {\n              ...prevState,\n              recordingMinutes: prevState.recordingMinutes + 1,\n              recordingSeconds: 0,\n            };\n        });\n      }, 1000);\n    else clearInterval(recordingInterval);\n\n    return () => clearInterval(recordingInterval);\n  });\n\n  useEffect(() => {\n    if (recorderState.mediaStream)\n      setRecorderState((prevState) => {\n        return {\n          ...prevState,\n          mediaRecorder: new MediaRecorder(prevState.mediaStream),\n        };\n      });\n  }, [recorderState.mediaStream]);\n\n  useEffect(() => {\n    const recorder = recorderState.mediaRecorder;\n    let chunks = [];\n\n    if (recorder && recorder.state === \"inactive\") {\n      recorder.start();\n\n      recorder.ondataavailable = (e) => {\n        chunks.push(e.data);\n      };\n\n      recorder.onstop = () => {\n        const blob = new Blob(chunks, { type: \"audio/wav; codecs=opus\" });\n        chunks = [];\n\n        setRecorderState((prevState) => {\n          if (prevState.mediaRecorder)\n            return {\n              ...initialState,\n              audio: window.URL.createObjectURL(blob),\n            };\n          else return initialState;\n        });\n      };\n    }\n\n    return () => {\n      if (recorder) recorder.stream.getAudioTracks().forEach((track) => track.stop());\n    };\n  }, [recorderState.mediaRecorder]);\n\n  return {\n    recorderState,\n    startRecording: () => startRecording(setRecorderState),\n    cancelRecording: () => setRecorderState(initialState),\n    saveRecording: () => saveRecording(recorderState.mediaRecorder),\n  };\n}\n","import RecorderControls from \"./components/recorder-controls\";\nimport RecordingsList from \"./components/recordings-list\";\nimport useRecorder from \"./hooks/useRecorder\";\nimport \"./app.css\";\n\nexport default function App() {\n  const { recorderState, ...handlers } = useRecorder();\n  const { audio } = recorderState;\n\n  return (\n    <><><h1 className='app_header'>Transcribe your voice to text </h1>\n      <section className=\"voice-recorder\">\n        <h1 className=\"title\">Voice Recorder</h1>\n        <div className=\"recorder-container\">\n          <RecorderControls recorderState={recorderState} handlers={handlers} />\n          <RecordingsList audio={audio} />\n        </div>\n      </section></>\n\n      <div className=\"speechContainer\">\n        \n        <h3>Upload your .wav file</h3>\n        <form method=\"post\" encType=\"multipart/form-data\">\n          <input type=\"file\" name=\"file\" />\n          <br />\n          <h3>Convert audio to text </h3>\n          <input type=\"submit\" id=\"submitButton\" defaultValue=\"Transcribe\" />\n        </form>\n        <div id=\"speechTranscript\">\n          <div id=\"speechTranscriptContainer\">\n            <h1>Results</h1>\n            <p id=\"speechText\">\n              {\" \"}\n              <deploy prop=\"{state}\"> </deploy>\n            </p>\n          </div>\n        </div>\n      </div></>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}